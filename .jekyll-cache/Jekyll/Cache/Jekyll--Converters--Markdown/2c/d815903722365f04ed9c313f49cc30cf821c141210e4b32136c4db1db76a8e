I"c$<p><strong>다이내믹 프로그래밍 방법이 필요한 문제들은 처음엔 접근 방법이 막막하게 느껴지곤 합니다. DP 접근 풀이가 필요한 관련 유형의 문제들을 많이 다뤄보도록 합시다.</strong></p>

<p>관련 문제)</p>

<ul>
  <li><a href="https://www.acmicpc.net/problem/2293">2293 동전1</a></li>
  <li><a href="https://www.acmicpc.net/problem/2294">2294 동전2</a></li>
</ul>

<hr />

<h3 id="백준-123-더하기-415989번">백준) 1,2,3 더하기 4(15989번)</h3>

<p><a href="https://www.acmicpc.net/problem/15989">1,2,3 더하기 4</a></p>

<ul>
  <li>문제 설명: 1,2,3 의 합으로 임의의 숫자를 표현하는 방법의 개수를 구하는 문제입니다. <strong>단, 숫자의 순서만 바뀐 경우는 모두 같은 경우로 생각합니다.</strong></li>
</ul>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/130738299-1d54ae29-e8b6-4496-9feb-8e7572f2eda4.png" width="1000" /><br />문제 설명
</p>

<p>문제에서 수열의 크기(N)는 최대 10,000 입니다.<br />
<strong>DP</strong>를 활용하여 문제를 접근할 것이므로 <strong>점화식의 정의</strong>를 우선 세워봅시다.</p>

<h3 id="dn을-문제의-조건을-만족하는-n의-경우의-수-라고-정의하여봅시다">d[n]을 문제의 조건을 만족하는 n의 경우의 수 라고 정의하여봅시다.</h3>

<p>그렇다면 d[n]은 <strong>마지막 자리에 오는 수</strong>가 1,2,3이냐를 기준으로 다음과 같이 표현이 가능합니다.</p>

<ul>
  <li>d[n]=d[n-1]+d[n-2]+d[n-3]</li>
  <li>d[n]=(마지막자리 1)+(마지막자리 2)+(마지막자리 3)</li>
</ul>

<p>위의 점화식의 정의에 따라 두가지 방법의 구현 코드를 비교하여 보겠습니다.</p>

<blockquote>
  <p><strong>구현 과정: 첫 번째 방법</strong></p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">limit</span><span class="o">=</span><span class="mi">10000</span><span class="o">+</span><span class="mi">1</span>
<span class="n">d</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">limit</span>
<span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">limit</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">:</span>
      <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>d[0] = 1 가지</li>
  <li>d[1] = (1) = 1 가지</li>
  <li>d[2] = (1+1) + (2) = 2 가지</li>
  <li>d[3] = (1+1+1) + (1+2) + (3) = 3 가지</li>
  <li>d[4] = (1+1+1+1) + (2+1+1) + (1+2+1) + (3+1) + (1+1+2) + (2+2) + (1+3) = 7가지</li>
</ul>

<blockquote>
  <p><strong>구현 과정: 두 번째 방법</strong></p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">limit</span><span class="o">=</span><span class="mi">10000</span><span class="o">+</span><span class="mi">1</span>
<span class="n">d</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">limit</span>
<span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">limit</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">:</span>
      <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>d[0] = 1 가지</li>
  <li>d[1] = (1) = 1 가지</li>
  <li>d[2] = (1+1) + (2) = 2 가지</li>
  <li>d[3] = (1+1+1) + (1+2) + (1+2) + (3) = 4 가지</li>
  <li>d[4] = (1+1+1+1) + (1+1+2) + (2+2) + (1+3) = 4 가지</li>
</ul>

<h3 id="위의-두-가지-구현에서의-차이점이-보이나요">위의 두 가지 구현에서의 차이점이 보이나요?</h3>

<p>두 가지 방법 모두 위에서 정의한 점화식의 규칙을 만족하지만 그 결과는 다르게 나타납니다.<br />
그러나 문제의 조건을 만족하는 방법은 <strong>두 번째 방법</strong>인 것을 확인 할 수 있습니다.<br />
그 이유는, 두 번째 방법의 경우 <strong>1,2,3을 사용하는 반복문을 가장 바깥으로 하여 수의 배열이 오름차순으로 정렬되는 효과</strong>를 보이기 때문입니다.</p>

<p>따라서 오름차순으로 정렬됨으로 인해 <strong>중복되는 경우가 없이</strong> 문제의 조건을 완벽하게 만족하게 됩니다.</p>

<p>이러한 아이디어(?)는 처음에는 생각하기 다소 힘들고 두 가지의 차이점을 머릿속으로 명확하게 구별하는 것은 어렵습니다.<br />
그렇기 때문에, <strong>다양한 DP 유형의 문제</strong>(다른 유형과 다르게 DP는 많이 풀어서 경험을 쌓는수 밖에 없는것 같아요 ㅠㅠ)를 풀어보고 구현의 과정의 일부분은 머리가 아닌 손으로 몇 가지 적으면서 문제를 푸는 습관을 들여봅시다.</p>

<blockquote>
  <p>전체 구현 코드</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="k">def</span> <span class="nf">input</span><span class="p">():</span> <span class="k">return</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">rstrip</span><span class="p">()</span>

<span class="n">limit</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">+</span><span class="mi">1</span>
<span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">limit</span>
<span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">limit</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">-</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="p">]</span>

<span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>

</code></pre></div></div>
:ET