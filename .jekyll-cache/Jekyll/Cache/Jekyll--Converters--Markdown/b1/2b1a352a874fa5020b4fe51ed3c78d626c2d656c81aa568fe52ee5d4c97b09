I"@<h2 id="pipleline-cpu-개념-정리">Pipleline CPU 개념 정리</h2>

<hr />

<p>Pipeline CPU를 design &amp; implement 하기 전에, Pipeline CPU의 구조를 먼저 충분히 이해하는 것이 중요할 것 같습니다.<br />
Pipeline CPU는 이전에 배웠던 Single-cycle CPU, Multi-cycle CPU 에 비해서 같은 cycle 시간 동안 더 많은 instruction을 수행할 수 있 수 있습니다.</p>

<p>어떠한 특성들 때문에 이러한 효율이 가능한 것일까요?<br />
그리고 구현 상에 어떠한 점을 주의해야 할까요?</p>

<h3 id="세가지-주요-사항">세가지 주요 사항</h3>

<ol>
  <li>Data Hazard</li>
  <li>Control Hazard</li>
  <li>Branch Prediction</li>
</ol>

<hr />

<p>RAW Hazard 조건</p>

<ul>
  <li>I(young) =&gt; R/I, LD, SD, Bxx, JALR // Read Instruction</li>
  <li>I(old) =&gt; R/I, LD, JAL, JALR // Write</li>
  <li>dis(I OLD, I YOUNG) &lt;= dis(ID, WB) = 3 // dist 가 3 이상인 경우는 hazard가 발생하지 않으므로
write(old instructiion) 보다 read(young instruction)이 먼저 수행될경우 hazard가 발생한다.</li>
</ul>
<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/116329894-40c7b780-a807-11eb-8e9e-7580d0685266.png" width="400" /><br />Feature1. Responsive Web Page
</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">rs1_EX</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">rs1_EX</span> <span class="o">==</span> <span class="n">rd_MEM</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">RegWrite_MEM</span> <span class="n">then</span>
<span class="n">forward</span> <span class="n">operand</span> <span class="n">from</span> <span class="n">MEM</span> <span class="n">stage</span> <span class="c1">// dist=1</span>
<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">rs_EX</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">rs_EX</span> <span class="o">==</span> <span class="n">rd_WB</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">RegWrite_WB</span> <span class="n">then</span>
<span class="n">forward</span> <span class="n">operand</span> <span class="n">from</span> <span class="n">WB</span> <span class="n">stage</span> <span class="c1">// dist=2</span>
<span class="k">else</span>
<span class="n">use</span> <span class="n">the</span> <span class="n">operand</span> <span class="n">from</span> <span class="k">register</span> <span class="n">file</span> <span class="c1">//dist=3</span>
</code></pre></div></div>
:ET