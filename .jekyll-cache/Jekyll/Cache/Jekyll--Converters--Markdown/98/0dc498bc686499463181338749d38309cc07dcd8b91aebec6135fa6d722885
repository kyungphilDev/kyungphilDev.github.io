I"I<p><strong>삼성역량테스트에서 출제되는 코테문제들의 경우 2차원 배열을 특정한 기준을 통해 회전시키는 문제가 자주 출제됩니다.</strong></p>

<p>그래서 이번 포스트에서는 관련된 유사한 유형의 문제들로 코테에 자주 등장하는 2차원 배열을 능숙하게 다루는 유형을 대비하여 봅시다.</p>

<p>참고)</p>

<ul>
  <li><a href="https://www.codetree.ai/frequent-problems/rotating-glacier/description">삼성SW역량테스트 20년 하반기 오후 2번 문제</a></li>
  <li><a href="https://www.codetree.ai/frequent-problems/maze-tower-defense/description">삼성SW역량테스트 21년 상반기 오후 2번 문제</a></li>
</ul>

<h3 id="백준-배열-돌리기-1">백준) 배열 돌리기 1</h3>

<p><a href="https://www.acmicpc.net/problem/16926">배열돌리기 1_백준</a></p>

<ul>
  <li>문제 설명: N*M 크기의 2차원 배열의 둘레 한층 한층을 기준으로, R만큼 회전시키는 문제입니다.</li>
</ul>
<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/130421418-a5dcca70-25fd-43d1-b411-65082f5ac593.png" width="600" /><br />배열돌리기 1
</p>

<p>배열을 Column 혹은 Row를 기준으로 정렬시키는 유형이 아니라 배열의 둘레를 회전시키는 것이라<br />
풀이의 접근이 난감하게 느껴질 수가 있습니다. 하지만 2차원 배열의 둘레를 1차원 리스트로 변환하면 문제가 간단하게 바뀝니다.</p>

<p>파이썬 코드와 함께 차근 차근 생각하여 봅시다.</p>

<ol>
  <li>가장 바깥쪽의 첫 번째 둘레를, Lv1 둘레라고 하고, Lv1의 요소들을 우선은 1차원 배열에 담습니다.</li>
  <li>1번의 과정을 모든 Lv에 대해서 수행합니다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 입력을 받는 부분
</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="c1"># 최대 Lv
</span><span class="n">max_lv</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
<span class="c1"># 임시로 1차원 배열로 변환한 Lv을 저장할 리스트
</span><span class="n">tmp_set</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_lv</span><span class="p">):</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># 각 Lv의 둘레를 1차원 배열의 형태로 바꾸어 저장할 곳
</span>    <span class="c1"># 왼쪽 위 꼭짓점에서 부터 시작하여 시계방향으로 오른쪽, 아래, 왼쪽, 위의 순서로 1차원 배열에 저장합니다.
</span>    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
    <span class="n">tmp_set</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>각각의 Lv 배열들을 R번 회전시키고, 1번의 과정과 같은 방법으로 다시 2차원 배열에 담아줍니다.</li>
  <li>하이</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_lv</span><span class="p">):</span>
    <span class="c1"># 각 Lv 마다 1차원 배열의 전체 길이를 저장합니다.
</span>    <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp_set</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="c1"># r번 회전을 size만큼 한다면 회전을 안한 결과와 같으므로 mod size를 합니다.
</span>    <span class="c1"># idx 위치를 기준으로 tmp배열의 값을 원래 a 2차원배열에 저장합니다.
</span>    <span class="n">idx</span> <span class="o">=</span> <span class="n">r</span> <span class="o">%</span> <span class="n">size</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp_set</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="c1"># 1번 과정과 같은 방법으로 오른쪽, 아래, 왼쪽, 위의 순서로 수행합니다.
</span>    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
</code></pre></div></div>

<h3 id="제너레이터">제너레이터</h3>

<p><strong>제너레이터(Generator)</strong>는 sequence를 생성하는 객체입니다. 제너레이터를 사용하면 전체 sequence를 한 번에 메모리에 생성하여 잠재적으로 아주 큰 sequence를 순회할 수 있습니다.<br />
설명으로는 아직 잘 이해가 안되는 것 같기에 generator의 대표적인 예시를 살펴봅시다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
</code></pre></div></div>

<p><strong>range()</strong>는 제너레이터의 대표적인 예시입니다. <strong>일반적인 함수라면 반복문을 거쳐 여러번 수행이 될 경우에 매번 각 함수의 첫 줄에서부터 함수가 실행이 됩니다.</strong> 하지만 제너레이터는 일반 함수와는 다르게 <strong>제너레이터를 순회할 때마다 마지막으로 호출된 항목을 기억하고 다음 값을 반환하는 특징이 있습니다.</strong> 따라서 위의 예시에서의 range()함수 처럼 for문에서 반복적으로 호출되지만 이전의 호출된 항목을 기억하기 때문에 i의 값을 순차적으로 반환할 수가 있습니다.</p>

<ul>
  <li>제너레이터 함수 정의하기</li>
</ul>

<p>range()함수를 대신하여 직접 정의한 custom_range() 제너레이터 함수를 정의하여 봅시다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">custom_range</span><span class="p">(</span><span class="n">first</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">last</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
  <span class="n">number</span> <span class="o">=</span> <span class="n">first</span>
  <span class="k">while</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">:</span>
    <span class="k">yield</span> <span class="n">number</span>
    <span class="n">number</span> <span class="o">+=</span> <span class="n">step</span>

<span class="o">&gt;&gt;&gt;</span><span class="n">custom_range</span>
<span class="o">&lt;</span><span class="n">function</span> <span class="n">custom_range</span> <span class="n">at</span> <span class="p">...</span><span class="o">&gt;</span> <span class="c1">#일반 함수
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">ranger</span> <span class="o">=</span> <span class="n">custom_range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">custom_range</span> <span class="n">at</span> <span class="p">...</span><span class="o">&gt;</span> <span class="c1">#함수 생성시 제너레이터 객체 반환
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ranger</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="mi">1</span>
<span class="mi">2</span>
<span class="mi">3</span>
</code></pre></div></div>

<p>단 제너레이터 객체는 한 번만 순회할 수 있기 때문에, 여러번 호출시 다시 시작될 수가 없습니다.</p>

<h3 id="객체">객체</h3>

<ul>
  <li>초기화(initialization)</li>
</ul>

<p>객체를 생성할 때 사용자 정의가 정의한 속성을 할당하려면 객체 initilization method를 사용해야 합니다. 메소드는 <strong>init()</strong>으로 정해져 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>


<span class="n">IU</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">'ji-eun'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'name: </span><span class="si">{</span><span class="n">IU</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">name</span><span class="p">:</span> <span class="n">ji</span><span class="o">-</span><span class="n">eun</span>

</code></pre></div></div>

<p>C/C++을 해보신 분이라면 <strong>self</strong>의 개념에 대해 조금은 느낌이 오실 것 같습니다. 자신을 가르키는 this 포인터 처럼 self 매개변수는 개별 객체 자신을 참조하도록 지정하는 역할을 수행합니다.</p>

<p>클래스에서 <strong>init</strong>()을 정의할 때는, 첫번째 매개변수로 일반적으로 <strong>self를</strong> 사용합니다.</p>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/125079699-e26c5e80-e0fe-11eb-88ac-aa7362b0ea6c.png" width="700" /><br />self가 아닌 경우
</p>
<p><strong>self</strong>가 아닌 <strong>other</strong> 으로 정의하였을 경우, warning message가 뜨기는 하지만 결과는 동일하게 출력되었습니다.</p>
<blockquote>
  <p>self는 파이썬에서 일종의 약속으로 생각하면 될 것 같습니다.</p>
</blockquote>

<ul>
  <li>
    <p>부모로 부터 클래스 상속받기</p>
  </li>
  <li>
    <p>메소드 오버라이드 (오버로딩 오버라이딩 오버라이드 개념 차이점 정리)</p>
  </li>
  <li>
    <p>다중 상속</p>
  </li>
  <li>
    <p>믹스인</p>
  </li>
  <li>
    <p>getter/setter</p>
  </li>
  <li>
    <p>매직 메소드</p>
  </li>
</ul>

<hr />

<p><strong>Post의 참고자료와 이미지의 출처는 아래와 같습니다.</strong></p>

<blockquote>
  <p>처음 시작하는 파이썬[2판], 한빛미디어, 빌루바노빅</p>
</blockquote>

<hr />
:ET