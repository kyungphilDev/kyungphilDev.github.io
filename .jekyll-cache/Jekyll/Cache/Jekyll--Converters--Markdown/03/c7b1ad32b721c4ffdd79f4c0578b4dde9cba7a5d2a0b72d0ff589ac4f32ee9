I"MX<p><strong>삼성역량테스트에서 출제되는 코테문제들의 경우 2차원 배열을 특정한 기준을 통해 회전시키는 문제가 자주 출제됩니다.</strong></p>

<p>그래서 이번 포스트에서는 관련된 유사한 유형의 문제들로 코테에 자주 등장하는 2차원 배열을 능숙하게 다루는 유형을 대비하여 봅시다.</p>

<p>관련 문제)</p>

<ul>
  <li><a href="https://www.codetree.ai/frequent-problems/rotating-glacier/description">삼성SW역량테스트 20년 하반기 오후 2번 문제</a></li>
  <li><a href="https://www.codetree.ai/frequent-problems/maze-tower-defense/description">삼성SW역량테스트 21년 상반기 오후 2번 문제</a></li>
</ul>

<hr />

<h3 id="백준-배열-돌리기-316935번">백준) 배열 돌리기 3(16935번)</h3>

<p><a href="https://www.acmicpc.net/problem/16935">배열돌리기 3_백준</a></p>

<ul>
  <li>
    <p>문제 설명: N*M 크기의 2차원 배열에 대하여 8가지의 연산을 구현하는 문제입니다.</p>
  </li>
  <li>
    <p><strong>1번 연산</strong></p>
  </li>
</ul>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/130440805-9c9bdb2c-ca5c-43da-8519-16e09a424c76.png" width="500" /><br />1번 연산
</p>

<p>1번 연산을 두가지의 방법으로 풀이해보려고 합니다.<br />
우선 첫번째 방법은, 파이썬의 <strong>리스트 컴프리핸션</strong> 방식을 잘 활용해주는 방법입니다.</p>

<blockquote>
  <p><strong>첫번째 방법, 구현 과정</strong></p>

  <p>기존의 배열을 <strong>가장 아래 열</strong>에서부터 읽으면서 새롭게 저장한다.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">op1</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][:]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">a</span>
</code></pre></div></div>

<p>처음 위의 표현을 볼 때는, 세번째 줄에 대해서 조금 설명을 덧붙이자면,<br />
“내가 a 2차원 배열을 다시 새롭게 만들건데! a[i]번째 row를 싹다 긁어서 덮어씌울꺼야! 근데 i는 역순으로 <strong>가장 밑(idx:n-1)</strong>에서부터 시작해서 <strong>가장 위에(idx: 0)</strong> 순서로 정했어” 라고 할 수가 있습니다.</p>

<p>파이썬 요약 포스트를 참고해 주시기 바랍니다.</p>

<blockquote>
  <p><strong>두번째 방법, 구현 과정</strong></p>

  <p>문제에서 주어진 연산1 정의를 그대로 구현한다.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">op1</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="c1"># 새롭게 저장할 tmp 2차원 배열을 선언합니다.
</span>    <span class="n">tmp</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">tmp</span>
</code></pre></div></div>

<p>처음 위의 표현을 볼 때는, 세번째 줄에 대해서 조금 설명을 덧붙이자면,<br />
“내가 a 2차원 배열을 다시 새롭게 만들건데! a[i]번째 row를 싹다 긁어서 덮어씌울꺼야! 근데 i는 역순으로 <strong>가장 밑(idx:n-1)</strong>에서부터 시작해서 <strong>가장 위에(idx: 0)</strong> 순서로 정했어” 라고 할 수가 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_lv</span><span class="p">):</span>
    <span class="c1"># 각 Lv 마다 1차원 배열의 전체 길이를 저장합니다.
</span>    <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp_set</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="c1"># r번 회전을 size만큼 한다면 회전을 안한 결과와 같으므로 mod size를 합니다.
</span>    <span class="c1"># idx 위치를 기준으로 tmp배열의 값을 원래 a 2차원배열에 저장합니다.
</span>    <span class="n">idx</span> <span class="o">=</span> <span class="n">r</span> <span class="o">%</span> <span class="n">size</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp_set</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="c1"># 1번 과정과 같은 방법으로 오른쪽, 아래, 왼쪽, 위의 순서로 수행합니다.
</span>    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
</code></pre></div></div>

<hr />

<h3 id="백준-배열-돌리기-1">백준) 배열 돌리기 1</h3>

<p><a href="https://www.acmicpc.net/problem/16926">배열돌리기 1_백준</a></p>

<ul>
  <li>문제 설명: N*M 크기의 2차원 배열의 둘레 한층 한층을 기준으로, R만큼 회전시키는 문제입니다.</li>
</ul>
<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/130421418-a5dcca70-25fd-43d1-b411-65082f5ac593.png" width="600" /><br />배열돌리기 1
</p>

<p>배열을 Column 혹은 Row를 기준으로 정렬시키는 유형이 아니라 배열의 둘레를 회전시키는 것이기 때문에, 풀이의 접근이 난감하게 느껴질 수가 있습니다. 하지만 2차원 배열의 둘레를 1차원 리스트로 변환하여 생각한다면 문제가 간단하게 바뀝니다.</p>

<p>파이썬 코드와 함께 차근 차근 생각하여 봅시다.</p>

<blockquote>
  <p><strong>전체 구현 과정</strong></p>

  <ol>
    <li>가장 바깥쪽의 첫 번째 둘레를, Lv1 둘레라고 하고, Lv1의 요소들을 우선은 1차원 배열에 담습니다.</li>
    <li>1번의 과정을 모든 Lv에 대해서 수행합니다.</li>
    <li>각각의 Lv 배열들을 R번 회전시키고, 1번의 과정과 같은 방법으로 다시 2차원 배열에 담아줍니다.</li>
  </ol>
</blockquote>

<ul>
  <li>가장 바깥쪽의 첫 번째 둘레를, Lv1 둘레라고 하고, Lv1의 요소들을 우선은 1차원 배열에 담습니다.</li>
  <li>1번의 과정을 모든 Lv에 대해서 수행합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 입력을 받는 부분
</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="c1"># 최대 Lv
</span><span class="n">max_lv</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
<span class="c1"># 임시로 1차원 배열로 변환한 Lv을 저장할 리스트
</span><span class="n">tmp_set</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_lv</span><span class="p">):</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># 각 Lv의 둘레를 1차원 배열의 형태로 바꾸어 저장할 곳
</span>    <span class="c1"># 왼쪽 위 꼭짓점에서 부터 시작하여 시계방향으로 오른쪽, 아래, 왼쪽, 위의 순서로 1차원 배열에 저장합니다.
</span>    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
    <span class="n">tmp_set</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>각각의 Lv 배열들을 R번 회전시키고, 1번의 과정과 같은 방법으로 다시 2차원 배열에 담아줍니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_lv</span><span class="p">):</span>
    <span class="c1"># 각 Lv 마다 1차원 배열의 전체 길이를 저장합니다.
</span>    <span class="n">size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">tmp_set</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="c1"># r번 회전을 size만큼 한다면 회전을 안한 결과와 같으므로 mod size를 합니다.
</span>    <span class="c1"># idx 위치를 기준으로 tmp배열의 값을 원래 a 2차원배열에 저장합니다.
</span>    <span class="n">idx</span> <span class="o">=</span> <span class="n">r</span> <span class="o">%</span> <span class="n">size</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp_set</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="c1"># 1번 과정과 같은 방법으로 오른쪽, 아래, 왼쪽, 위의 순서로 수행합니다.
</span>    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
</code></pre></div></div>

<hr />

<hr />

<p><strong>Post의 참고자료와 이미지의 출처는 아래와 같습니다.</strong></p>

<blockquote>
  <p>처음 시작하는 파이썬[2판], 한빛미디어, 빌루바노빅</p>
</blockquote>

<hr />
:ET