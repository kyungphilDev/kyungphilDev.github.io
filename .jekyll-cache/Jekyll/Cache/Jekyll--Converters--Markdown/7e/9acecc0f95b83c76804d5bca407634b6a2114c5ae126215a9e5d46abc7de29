I"/<blockquote>
  <h3 id="pipeline-cpu-목차">Pipeline-CPU 목차</h3>

  <ul>
    <li><a href="/computer-architecture/pipeline-1/">Pipeline CPU(1) : Single-Cycle vs Multi-Cycle CPU</a></li>
    <li><a href="/computer-architecture/pipeline-2/">Pipeline CPU(2) : Pipeline-CPU의 간략한 이해</a></li>
    <li><a href="/computer-architecture/pipeline-3/">Pipeline CPU(3) : Data Hazard(RAW)</a></li>
    <li><a href="/computer-architecture/pipeline-4/">Pipeline CPU(4) : Data Forwarding</a></li>
    <li><a href="/computer-architecture/pipeline-5/">Pipeline CPU(5) : Control Hazard</a></li>
  </ul>
</blockquote>

<h3 id="세가지-주요-사항">세가지 주요 사항</h3>

<ol>
  <li>Data Hazard</li>
  <li>Control Hazard</li>
  <li>Branch Prediction</li>
</ol>

<hr />

<h2 id="control-hazard">Control Hazard</h2>

<p>앞서 <strong>Pipeline-CPU</strong>를 이해하는데 중요한 세가지 주요 사항들 중에서 <strong>Data Hazard와 그 해결 방법(Data Forwarding)</strong>에 대해 알아보았습니다. 이번 Post에서는 <strong>Control Hazard</strong>가 무엇인지에 대해서 알아봅시다.</p>

<p><strong>Control Hazard</strong>는 <strong>Control Flow</strong>와 관련된 문제입니다. <strong>Data Hazard</strong>가 <strong>레지스터들간의 Data Depedence</strong>와 관련된 문제였다면, <strong>Control Hazard</strong>는 어떤 PC 값을 읽어와서 Instruction을 수행할지에 대한 <strong>PC에 관한 Data dependence</strong>라고 이해할 수가 있습니다.</p>

<p>Pipeline-CPU가 실행되는 과정을 한 번 살펴봅시다. PC의 값으로 부터 해당 주소의 메모리에 든 Instruction 읽어 오고 그 읽어온 Instruction을 바탕으로 IF(Instruction Fetch) 단계를 거쳐서 <strong>ID(Instruction Decode) 단계</strong>에서 해당 Instruction이 <strong>JAL, JALR, Bxx와 같은 Control Flow Instruction</strong>인지 혹은 R/I-Type, LD, SD와 같은 다른 Instruction인지 구분을 해야합니다.</p>

<p>일반적인 R/I-Type의 Instruction의 예시로, <strong>ADD operator</strong>가 ID단계에서 확인이 되었다면 <strong>Next PC</strong>는 순차적으로 현재의 PC 바로 다음인 <strong>PC+4</strong>(word 가 4-Byte인 경우)가 될 것입니다.</p>

<p>하지만 <strong>JAL, Bxx</strong>와 같은 <strong>Control Flow Instruction</strong>인 경우는 어떨까요? 이 경우에는 <strong>ID 단계에서 바로 Next PC 값을 알 수가 없습니다</strong>. 이해를 돕기 위해 다음 예시를 살펴봅시다.</p>

<blockquote>
  <p>beq x1, x0, 16<br />
// TSC_MANUAL 기준<br />
if ($x1 == $x0) then $pc = $pc + (16+1)</p>
</blockquote>

<p>위의 BEQ Instruction이 들어왔다고 가정하여 봅시다. 두 레지스터에 든 값이 같은지 여부를 확인해야 하므로 EX 단계에서 ALU를 거쳐 <strong>MEM단계가 되어서야 Next PC 값이 확정되게 됩니다</strong>.</p>

<hr />

<blockquote>
  <p>지금까지 살펴보았던 <strong>Pipeline-CPU는 매 싸이클마다 연속적으로 새로운 Instruction이 알맞게</strong> 들어온다고 생각하였습니다.<br />
하지만 위의 내용을 종합하여 볼 때 <strong>최소 ID 단계</strong>가 되어야만 <strong>Next PC</strong>를 결정지을 수 있으므로 <strong>PC Hazard</strong>가 발생하는 것입니다.<br />
<strong>즉 PC Hazard distance는 최소 1(R/I-Type, LD, SD 인 경우)거나 3(Bxx, JAL, JALR 인 경우)이 발생하게 됩니다.</strong></p>
</blockquote>

<h2 id="control-hazard를-피하기-위한-방법-stalling">Control Hazard를 피하기 위한 방법: Stalling</h2>

<p>따라서 <strong>Control Hazard</strong>를 피하기 위해서는 <strong>최소한 ID 단계</strong>는 되어야 Next PC 값을 결정지을 수 있으므로 <strong>매번 1 STALL을 필요로 하게 됩니다.</strong></p>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/123131717-efdfe280-d488-11eb-9ed5-9c8dbee64475.png" width="800" /><br />Feature1. Control Hazard Resolved by Stalling
</p>

<p>하지만 <strong>Feature1</strong>에서 확인할 수 있듯이, 매번 1 STALL이 추가가 되게 된다면, CPU의 퍼포먼스는 반(i.e. IPC이 반으로 줄게됨)으로 줄어들게 됩니다.</p>

<p>그렇다면 Control Hazard를 해결하면서도 CPU의 성능 저하를 최소화 할 수 있는 방법은 없을까요?
그 해결방법이 다음 Post에서 중요하게 다뤄볼 <strong>Branch Prediction</strong> 입니다.</p>

<hr />

<p><strong>Post의 참고자료와 이미지의 출처는 아래와 같습니다.</strong></p>

<blockquote>
  <p>Computer Organization and Design RISC-V edition<br />
Computer Architecrue Lecture Note @ Carnegie Mellon University, University of, Michigan, Purdue University, University of Pennsylvania, University of Wisconsin and POSTECH.</p>
</blockquote>

<hr />
:ET