I">1<blockquote>
  <h3 id="pipeline-cpu-목차">Pipeline-CPU 목차</h3>

  <ul>
    <li><a href="/computer-architecture/pipeline-1/">Pipeline CPU(1) : Single-Cycle vs Multi-Cycle CPU</a></li>
    <li><a href="/computer-architecture/pipeline-2/">Pipeline CPU(2) : Pipeline-CPU의 간략한 이해</a></li>
    <li><a href="/computer-architecture/pipeline-3/">Pipeline CPU(3) : Data Hazard(RAW)</a></li>
    <li><a href="/computer-architecture/pipeline-4/">Pipeline CPU(4) : Data Forwarding</a></li>
    <li><a href="/computer-architecture/pipeline-5/">Pipeline CPU(5) : Control Hazard</a></li>
  </ul>
</blockquote>

<h3 id="세가지-주요-사항">세가지 주요 사항</h3>

<ol>
  <li>Data Hazard</li>
  <li>Control Hazard</li>
  <li>Branch Prediction</li>
</ol>

<hr />

<h2 id="control-hazard">Control Hazard</h2>

<p>앞서 <strong>Pipeline-CPU</strong>를 이해하는데 중요한 세가지 주요 사항들 중에서 <strong>1. Data Hazard와 그 해결 방법(Data Forwarding)</strong>에 대해 알아보았습니다. 이번 Post에서는 <strong>Control Hazard</strong>가 무엇인지에 대해서 알아봅시다.</p>

<h2 id="control-hazard는-control-flow와-관련된-문제입니다-data-hazard가-레지스터들간의-data-depedence와-관련된-문제였다면-control-hazard는-어떤-다음-pc-값을-읽어와서-instruction을-수행할지에-대한-pc에-관한-data-dependence라고-이해할-수가-있습니다"><strong>Control Hazard</strong>는 <strong>Control Flow</strong>와 관련된 문제입니다. <strong>Data Hazard</strong>가 <strong>레지스터들간의 Data Depedence</strong>와 관련된 문제였다면, <strong>Control Hazard</strong>는 어떤 다음 PC 값을 읽어와서 Instruction을 수행할지에 대한 <strong>PC에 관한 Data dependence</strong>라고 이해할 수가 있습니다.</h2>

<p><strong>RAW Hazard</strong>를 해결하는 가장 간단한 방법은 RAW가 발생한 두 Instruction간의 거리를 3보다 멀어지도록 두 Instruction 사이에 STALL을 추가해주는 방법이 있습니다.</p>

<p><strong>STALL을 함으로써</strong> I_OLD가 <strong>WB단계</strong>를 거쳐서 레지스터에 값을 저장할 때까지 충분히 기다려준 이후에, <strong>i.e dis(I_OLD,I_YOUNG) &gt; 3</strong>이 되도록, I_YOUNG의 Read가 순차적으로 실행되도록 하는 것 입니다.</p>

<p>하지만 STALL을 사용하는 것의 단점은 매번 RAW Hazard가 발생될 때마다, <strong>STALL이 생겨남으로 인해서 CPU의 성능이 저하가 된다는 단점이 있습니다.</strong> 성능의 저하없이 더욱 효율적인 해결방안은 없을까요?</p>

<h2 id="data-forwarding-logicregister-bypassing">Data Forwarding Logic(=Register Bypassing)</h2>

<p>STALL을 사용하는 방법보다 더욱 효과적인 방법이 <strong>Data Forwarding</strong>을 사용하는 방법입니다. 결론부터 말하자면, <strong>Data Forwarding</strong>을 통해서 <strong>dist(i,j)=1 인 LD(i.e. Load Instruction)</strong>을 제외한 모든 RAW Hazard를 해결할 수가 있습니다.</p>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/123098344-03c91b80-d46c-11eb-8d0c-ec72d23617f7.png" width="800" /><br />Feature3. Pipeline diagram
</p>

<p>매번 새로운 Instruction이 Pipeline을 통과하는 구조를 잘 살펴봅시다. 위의 <strong>Feature3</strong>을 보면 순서대로 Instruction이 들어오는 것에 따라 각 시간 별로, 어떤 Instruction이 어느 State에서 수행되고 있는지를 확인할 수가 있습니다.</p>

<blockquote>
  <p>sub x2, x1, x3<br />
and x12, x2, x5</p>
</blockquote>

<p>위의 두 Instruction을 예시로 살펴봅시다. <strong>x2</strong>에서 dist=1 인<strong>(i.e. 거리가 1)인 RAW Hazard</strong>가 발생하였다는 사실을 알 수 있습니다. 이전에 <strong>STALL을 이용한 해결방법</strong>을 생각한다면, EX단계에서 ALU를 수행한 값을 <strong>MEM단계에서 x2에 저장할 때까지</strong> <strong>두 번째 Instruction의 ID</strong>단계는 STALL을 통해 멈춰있어야만 합니다.</p>

<p>하지만 만약, <strong>EX단계의 ALU에서 계산된 값</strong>을 곧바로 <strong>두 번째 Instruction에서의 ALU의 Input</strong>으로 꽂아 줄 수 있다면 굳이 두 번째 Instruction이 ID단계에서 레지스터로 부터 x2를 읽지 않아도 잘 계산된 값을 받아올 수 있지 않을까요? 이러한 생각이 바로 Data Forwarding Logic 입니다.</p>

<p><strong>Feature3</strong>에서 확인할 수 있듯이, 첫 번째 Instruction에서 EX단계에서 계산된 값을 곧바로 STALL없이 두 번째 Instruction의 ALU의 Input으로 Forwarding 해주는 것을 확인할 수가 있습니다. 마찬가지로 <strong>dist=2(i.e. 거리가 2)</strong>인 경우에도 비슷한 방법으로, MEM에서 가진 x2의 값을 세 번째 Instruction의 ID단계에 곧바로 읽도록 Forwarding 해주었습니다.</p>

<p><strong>dist=3(i.e. 거리가 3)</strong>인 경우는 아래의 <strong>Feature4</strong>를 통해 쉽게 이해하여 봅시다.</p>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/116329894-40c7b780-a807-11eb-8e9e-7580d0685266.png" width="600" /><br />Feature4. Forwarding diagram
</p>

<p>거리가 3인 경우에는 <strong>첫 번째 Instruction이 WB단계에서 x2 레지스터에 값을 Write하는 동시에 네 번째 Instruction이 같은 위치의 x2 레지스터의 값을 Read</strong> 하면서 발생하는 RAW Hazard 입니다. 하지만 이때, <strong>WB(Write Back)하려고 들어오는 값을 그대로 받아서 ID단계에서 사용하도록 Forwarding</strong> 함으로써 Hazard를 해결할 수가 있습니다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">rs1_EX</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">rs1_EX</span> <span class="o">==</span> <span class="n">rd_MEM</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">RegWrite_MEM</span> <span class="n">then</span>
<span class="n">forward</span> <span class="n">operand</span> <span class="n">from</span> <span class="n">MEM</span> <span class="n">stage</span> <span class="c1">// dist=1</span>
<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">rs_EX</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">rs_EX</span> <span class="o">==</span> <span class="n">rd_WB</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">RegWrite_WB</span> <span class="n">then</span>
<span class="n">forward</span> <span class="n">operand</span> <span class="n">from</span> <span class="n">WB</span> <span class="n">stage</span> <span class="c1">// dist=2</span>
<span class="k">else</span>
<span class="n">use</span> <span class="n">the</span> <span class="n">operand</span> <span class="n">from</span> <span class="k">register</span> <span class="n">file</span> <span class="c1">//dist=3</span>
</code></pre></div></div>

<p>대략적인 코드 구조는 위와 같습니다.</p>

<p><strong>Data Forwarding</strong> 을 이해하는데 필요한 다음의 두가지 세부 사항을 한번 살펴보자.</p>

<hr />

<p><strong>1. 가장 최근의 값을 먼저 Forwarding 해주어야 한다.</strong><br />
<strong>2. Data forwarding으로 모든 instruction(RAW)을 해결할 수 있을까?</strong></p>

<hr />

<h3 id="1-가장-최근의-값을-먼저-forwarding-해주어야-한다">1. 가장 최근의 값을 먼저 Forwarding 해주어야 한다.</h3>

<p>다음의 예시의 경우를 한 번 살펴봅시다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sub</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x3</span>
<span class="n">add</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x5</span> <span class="c1">// dist(1,2)=1 (x2)</span>
<span class="n">add</span> <span class="n">x4</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x7</span> <span class="c1">// dist(1,3)=2 (x2), dist(2,3)=1(x2)</span>
</code></pre></div></div>

<p>위의 예시와 같은 경우에 만약 3 번째 줄을 수행할 때, <strong>Data forwarding</strong>을 <strong>dist=1 보다 dist=2를</strong> 먼저 수행한다고 가정하여 봅시다. <strong>올바른 계산은 3 번째 줄에게 가장 최근인 add를 한 결과를 x2가 받아와야 할 것입니다.</strong> 하지만, add를 수행하기 전인 <strong>sub의 결과로 부터 x2</strong>를 읽어오는 <strong>forwarding</strong>을 수행하기 때문에 올바른 결과값을 갖지 못하게되는 오류가 발생합니다.</p>

<p>따라서 위의 <strong>Data Forwarding Logic</strong>에서 확인할 수 있듯이, dist를 1,2,3 순서대로 즉 <strong>가장 가까운 값</strong>으로 부터 forwarding을 먼저 수행해 주어야 합니다.</p>

<h3 id="2-data-forwarding으로-모든-instructionraw을-해결할-수-있을까">2. Data forwarding으로 모든 instruction(RAW)을 해결할 수 있을까?</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ld</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x3</span><span class="p">,</span> <span class="n">x4</span>
<span class="n">add</span> <span class="n">x6</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x7</span> <span class="c1">//dist(1,2)=1 RAW(x2)</span>
<span class="n">sub</span> <span class="n">x8</span><span class="p">,</span> <span class="n">x9</span><span class="p">,</span> <span class="n">x10</span>
</code></pre></div></div>

<p>위의 경우 add에서 dist=1 이므로 <strong>data forwarding</strong>을 해주면 되지만 <strong>LD instruction</strong>이기 때문에 문제가 발생합니다. LD instruction의 경우, ALU로 부터 계산된 값이 아닌 <strong>메모리를 Read 한 값을 Forwarding</strong> 해주어야 하므로 <strong>dist=1</strong>일때 한 번의 STALL을 꼭 예외적으로 필요로 합니다.</p>

<p>따라서 위의 <strong>DataForwarding Logic</strong>과 함께 다음의 <strong>STALL 조건</strong>을 추가해 주어야 합니다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Stall 조건</span>
<span class="k">if</span><span class="p">([(</span><span class="n">rs1_ID</span> <span class="o">==</span> <span class="n">rd_EX</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">use_rs1</span><span class="p">(</span><span class="n">IR_ID</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">rs2_ID</span> <span class="o">==</span> <span class="n">rd_EX</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">use_rsw</span><span class="p">(</span><span class="n">IR_ID</span><span class="p">)]</span>
<span class="o">&amp;&amp;</span> <span class="n">MemRead_EX</span><span class="p">)</span> <span class="n">then</span> <span class="n">stall</span>
<span class="c1">//MemRead_EX : op=LD/LW/...</span>
</code></pre></div></div>

<hr />

<h2 id="전체적인-구현-design">전체적인 구현 Design</h2>

<p>RAW Hazard를 고려한 Data Forwarding 구현은 다음과 같습니다.</p>

<ol>
  <li>Data forwarding</li>
  <li>Hazard Detection(LD의 경우, STALL)</li>
</ol>

<p align="center">
  <img src="https://user-images.githubusercontent.com/80669616/116356232-f90c5480-a835-11eb-8979-b49dd1ad6250.png" width="700" /><br />Feature3. Pipeline CPU design(Data Forwarding)
</p>

<hr />

<p><strong>Post의 참고자료와 이미지의 출처는 아래와 같습니다.</strong></p>

<blockquote>
  <p>Computer Organization and Design RISC-V edition<br />
Computer Architecrue Lecture Note @ Carnegie Mellon University, University of, Michigan, Purdue University, University of Pennsylvania, University of Wisconsin and POSTECH.</p>
</blockquote>

<hr />
:ET